		## Configure The AD:
				1) Setup Admin Server/Tools To Manage AD:
					} Download AWS provided Microsft AD admin tools on a machine that can connect to the VPC:
						◊ Create a windows EC2 instance in Admin subnet to serve as a management workstation
							} Amazon Windows Server 2022 AMI
							} t3.medium (Not meant to scale)
							} Place in Administrative subnet
							} Attach both security groups:
								– FPHN-ADMIN-SG (for management access)
								– FPHN-AD-SG (for AD communications)
							
				
				2) Get DNS Info To Join the Management EC2 instance to the AD domain (Firstpointhealth.local)
					} You need the DNS server IP addresses provided by AWS directory Service
						◊ In the AWS console
							} Select your directory (firstpoint.local)
						◊ Note down:
							} Directory IP's
								– 10.0.30.37
								– 10.0.31.220
							} VPC:
								– vpc-07e89d0d06112dbe7
							} Subnets:
								– subnet-0c61639668387e6df 
								– subnet-047075994f5d0aacd 
								
							} Directory ID
								– d-9067c10869
							} Directory admin password (set during creation)
						
					
				
				3) Configure DNS on the Manamgement instance to use AWS AD's DNS Servers. This way instance can resolve and locate AWS AD services:
					} Connect to the Windows AD instance using Systems Manager Session Manager
						◊ Open EC2 Console
						◊ Connect, choose session manager
						
					} Configure DNS settings on the Instance using the DNS IP from AWS Directory Services:
						A) Get Current Network Adapter: 
							} Get-NetAdapter
						B) After getting index #, set the DNS servers using the directory's DNS addresses. From your Directory Service details:
							} Set-DnsClientServerAddress -InterfaceIndex <index> -ServerAddresses "<DNS1>","<DNS2>"
						C) Verify The Changes:
							} Get-DnsClientServerAddress
							
				4) Join The Instance To The AWS Managed AD Domain (FirstpointHospital.local):
					} Run Commands:
						- $domainCred = Get-Credential
						- Add-Computer -DomainName "firstpointhospital.local" -Credential (Get-Credential "Admin@firstpointhospital.local") -Restart
						
					
					
				5) Setup Organizational Units:
					} OU's:
						◊ Clinical Staff OU
						◊ IT Admin OU
						◊ DB OU
						◊ App Supprt OU
					} Steps:
						◊ Connect to the instance
						◊ Open AD
						◊ Right-click the domain and create OU
				6) Create AD users and Groups:
					} 
				7) Configure Group Policies:
					} 
	
							
	
			
		1) Build The IAM Groups and Roles to Map to AD: 
			A) Create Groups For Human Users:
				§ Based on access control roles in previous steps (Admins, Developers, Network Team, etc.)
				
				§ Use AWS Managed Policies where possible
	
			- Create Groups:
				§ Create Admin Group - Full Control
					} Name: Admin
					} Attach Policies:
						◊ Administrator Access
				§ Create Developers Group
					} Name: Developers
					} Polices:
						◊ AmazonEC2FullAccess – Manage EC2 instances
						◊ AmazonRDSFullAccess – Manage RDS databases
				§ Auditors Group:
					} Name: Auditors
					} Policies:
						◊ 'ReadOnlyAccess' to view logs, resources, and configs
				§ Backup Admins:
					} Name: BackupAdmins
					} Policies:
						◊ AmazonS3FullAccess – Manage S3 buckets and objects for backups.
						◊ AmazonRDSFullAccess – Manage RDS backups and snapshots
				§ Network Admins:
					} Name: NetworkAdmins
					} Policies:
						◊ AmazonVPCFullAccess – Manage VPCs, subnets, and route tables.
						◊ AWSCloudFormationFullAccess (Optional if using templates) – Manage cloud resources programmatically
				
				◊ Add Users To Groups:
					} In IAM dashboard
						◊ Select user and assign to group
			
				◊ Implement MFA:
					} In IAM dashboard, go to account settings
						◊ Enable MFA for each user
						◊ Set password policy
							} 12 char
							} Combo in numbers, etc.
							} Rotate every 90 day
		
		
			B) Create IAM Roles For Resources:
				} Create Role For EC2
					} Trusted Entity Type: EC2
					} Use Cases: EC2
					} Policies:
						◊ AmazonS3ReadOnlyAccess – For backup data access.
						◊ CloudWatchAgentServerPolicy – For monitoring and logging.
						◊ AmazonSSMManagedInstanceCore – For Systems Manager (secure SSH-less access)
					} Name: AppServerRole
						
				} Create Role For RDS:
					} TET: AWS Service
					} Use Case: RDS
					} Policies:
						◊ AmazonS3ReadOnlyAccess – For accessing backups.
						◊ CloudWatch Logs Policy – For performance monitoring and logging
						◊ Name: DBRole
				
				
				} Attach Roles To Resources:
					} For EC2 Instances:
						- In EC2 dashboard select instance -> actions -> security -> modify IAM role -> attach role
					} For RDS Instances:
						- In RDS dashboard -> select DB -> modify -> choose role under IAM role
